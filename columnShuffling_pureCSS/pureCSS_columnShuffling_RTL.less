.baseOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-@{colNum}-@{colTotal}.start-@{count},
		.pure-u-sm-@{colNum}-@{colTotal}.start-@{count},
		.pure-u-md-@{colNum}-@{colTotal}.start-@{count},
		.pure-u-lg-@{colNum}-@{colTotal}.start-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-@{count} {
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-@{colNum}-@{colTotal}.end-@{count},
		.pure-u-sm-@{colNum}-@{colTotal}.end-@{count},
		.pure-u-md-@{colNum}-@{colTotal}.end-@{count},
		.pure-u-lg-@{colNum}-@{colTotal}.end-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-@{count} {
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.baseOffset(@colTotal, @colNum, @count + 1);
}
// Small Stuff
.smMediaOffsetsXl(@n, @i: 1) when (@i < @n){
	.xlSmOffset(@n, @i); // Sm Grid
	.smMediaOffsetsXl(@n, @i + 1);
}
.smMediaOffsetsLg(@n, @i: 1) when (@i < @n){
	.lgSmOffset(@n, @i); // Sm Grid
	.smMediaOffsetsLg(@n, @i + 1);
}
.smMediaOffsetsMd(@n, @i: 1) when (@i < @n){
	.mdSmOffset(@n, @i); // Sm Grid
	.smMediaOffsetsMd(@n, @i + 1);
}
.smMediaOffsetsSm(@n, @i: 1) when (@i < @n){
	.smSmOffset(@n, @i); // Sm Grid
	.smMediaOffsetsSm(@n, @i + 1);
}

.xlSmOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-xl-@{colNum}-@{colTotal}.start-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-xl-@{colNum}-@{colTotal}.end-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.xlSmOffset(@colTotal, @colNum, @count + 1);
}
.lgSmOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-lg-@{colNum}-@{colTotal}.start-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-lg-@{colNum}-@{colTotal}.end-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.lgSmOffset(@colTotal, @colNum, @count + 1);
}
.mdSmOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-md-@{colNum}-@{colTotal}.start-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-md-@{colNum}-@{colTotal}.end-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.mdSmOffset(@colTotal, @colNum, @count + 1);
}
.smSmOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-sm-@{colNum}-@{colTotal}.start-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-sm-@{colNum}-@{colTotal}.end-sm-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.smSmOffset(@colTotal, @colNum, @count + 1);
}
// Medium Stuff
.mdMediaOffsetsXl(@n, @i: 1) when (@i < @n){
	.xlMdOffset(@n, @i); // Sm Grid
	.mdMediaOffsetsXl(@n, @i + 1);
}
.mdMediaOffsetsLg(@n, @i: 1) when (@i < @n){
	.lgMdOffset(@n, @i); // Sm Grid
	.mdMediaOffsetsLg(@n, @i + 1);
}
.mdMediaOffsetsMd(@n, @i: 1) when (@i < @n){
	.mdMdOffset(@n, @i); // Sm Grid
	.mdMediaOffsetsMd(@n, @i + 1);
}

.xlMdOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-xl-@{colNum}-@{colTotal}.start-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-md-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-xl-@{colNum}-@{colTotal}.end-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-md-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.xlMdOffset(@colTotal, @colNum, @count + 1);
}
.lgMdOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-lg-@{colNum}-@{colTotal}.start-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-md-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-lg-@{colNum}-@{colTotal}.end-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-md-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.lgMdOffset(@colTotal, @colNum, @count + 1);
}
.mdMdOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-md-@{colNum}-@{colTotal}.start-sm-@{count},
		.pure-u-md-@{colNum}-@{colTotal}.start-md-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-md-@{colNum}-@{colTotal}.end-sm-@{count},
		.pure-u-md-@{colNum}-@{colTotal}.end-md-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.mdMdOffset(@colTotal, @colNum, @count + 1);
}
// Large Stuff
.lgMediaOffsetsXl(@n, @i: 1) when (@i < @n){
	.xlLgOffset(@n, @i); // Sm Grid
	.lgMediaOffsetsXl(@n, @i + 1);
}
.lgMediaOffsetsLg(@n, @i: 1) when (@i < @n){
	.lgLgOffset(@n, @i); // Sm Grid
	.lgMediaOffsetsLg(@n, @i + 1);
}
.xlLgOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-xl-@{colNum}-@{colTotal}.start-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-md-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-lg-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-xl-@{colNum}-@{colTotal}.end-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-md-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-lg-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.xlLgOffset(@colTotal, @colNum, @count + 1);
}
.lgLgOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-lg-@{colNum}-@{colTotal}.start-sm-@{count},
		.pure-u-lg-@{colNum}-@{colTotal}.start-md-@{count},
		.pure-u-lg-@{colNum}-@{colTotal}.start-lg-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-lg-@{colNum}-@{colTotal}.end-sm-@{count},
		.pure-u-lg-@{colNum}-@{colTotal}.end-md-@{count},
		.pure-u-lg-@{colNum}-@{colTotal}.end-lg-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.lgLgOffset(@colTotal, @colNum, @count + 1);
}
// XL-Large Stuff
.xlMediaOffsets(@n, @i: 1) when (@i < @n){
	.xlXlOffset(@n, @i);
	.xlMediaOffsets(@n, @i + 1);
}
.xlXlOffset(@colTotal, @colNum, @count: 1) when (@count < @colTotal){
	.checkVal() when ((@count + @colNum) =< @colTotal){
		.pure-u-xl-@{colNum}-@{colTotal}.start-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-md-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-lg-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.start-xl-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			right: ~"@{p}%";
		}
		.pure-u-xl-@{colNum}-@{colTotal}.end-sm-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-md-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-lg-@{count},
		.pure-u-xl-@{colNum}-@{colTotal}.end-xl-@{count}{
			@p: round(@count / @colTotal * 100, 4);
			position: relative;
			left: ~"@{p}%";
		}
	}
	.checkVal();
	.xlXlOffset(@colTotal, @colNum, @count + 1);
}

.regOffsets(@n, @i: 1) when (@i < @n){
	.baseOffset(@n, @i); // Default Grid
	.regOffsets(@n, @i + 1);
}

.regOffsets(2);
.regOffsets(3);
.regOffsets(4);
.regOffsets(5);
.regOffsets(6);
.regOffsets(8);
.regOffsets(12);
.regOffsets(24);

@media screen and (min-width: 35.5em){
	.smMediaOffsetsXl(2);
	.smMediaOffsetsXl(3);
	.smMediaOffsetsXl(4);
	.smMediaOffsetsXl(5);
	.smMediaOffsetsXl(6);
	.smMediaOffsetsXl(8);
	.smMediaOffsetsXl(12);
	.smMediaOffsetsXl(24);

	.smMediaOffsetsLg(2);
	.smMediaOffsetsLg(3);
	.smMediaOffsetsLg(4);
	.smMediaOffsetsLg(5);
	.smMediaOffsetsLg(6);
	.smMediaOffsetsLg(8);
	.smMediaOffsetsLg(12);
	.smMediaOffsetsLg(24);

	.smMediaOffsetsMd(2);
	.smMediaOffsetsMd(3);
	.smMediaOffsetsMd(4);
	.smMediaOffsetsMd(5);
	.smMediaOffsetsMd(6);
	.smMediaOffsetsMd(8);
	.smMediaOffsetsMd(12);
	.smMediaOffsetsMd(24);

	.smMediaOffsetsSm(2);
	.smMediaOffsetsSm(3);
	.smMediaOffsetsSm(4);
	.smMediaOffsetsSm(5);
	.smMediaOffsetsSm(6);
	.smMediaOffsetsSm(8);
	.smMediaOffsetsSm(12);
	.smMediaOffsetsSm(24);
}
@media screen and (min-width: 48em){
	.mdMediaOffsetsXl(2);
	.mdMediaOffsetsXl(3);
	.mdMediaOffsetsXl(4);
	.mdMediaOffsetsXl(5);
	.mdMediaOffsetsXl(6);
	.mdMediaOffsetsXl(8);
	.mdMediaOffsetsXl(12);
	.mdMediaOffsetsXl(24);

	.mdMediaOffsetsLg(2);
	.mdMediaOffsetsLg(3);
	.mdMediaOffsetsLg(4);
	.mdMediaOffsetsLg(5);
	.mdMediaOffsetsLg(6);
	.mdMediaOffsetsLg(8);
	.mdMediaOffsetsLg(12);
	.mdMediaOffsetsLg(24);

	.mdMediaOffsetsMd(2);
	.mdMediaOffsetsMd(3);
	.mdMediaOffsetsMd(4);
	.mdMediaOffsetsMd(5);
	.mdMediaOffsetsMd(6);
	.mdMediaOffsetsMd(8);
	.mdMediaOffsetsMd(12);
	.mdMediaOffsetsMd(24);
}
@media screen and (min-width: 64em){
	.lgMediaOffsetsXl(2);
	.lgMediaOffsetsXl(3);
	.lgMediaOffsetsXl(4);
	.lgMediaOffsetsXl(5);
	.lgMediaOffsetsXl(6);
	.lgMediaOffsetsXl(8);
	.lgMediaOffsetsXl(12);
	.lgMediaOffsetsXl(24);

	.lgMediaOffsetsLg(2);
	.lgMediaOffsetsLg(3);
	.lgMediaOffsetsLg(4);
	.lgMediaOffsetsLg(5);
	.lgMediaOffsetsLg(6);
	.lgMediaOffsetsLg(8);
	.lgMediaOffsetsLg(12);
	.lgMediaOffsetsLg(24);
}
@media screen and (min-width: 80em){
	.xlMediaOffsets(2);
	.xlMediaOffsets(3);
	.xlMediaOffsets(4);
	.xlMediaOffsets(5);
	.xlMediaOffsets(6);
	.xlMediaOffsets(8);
	.xlMediaOffsets(12);
	.xlMediaOffsets(24);
}